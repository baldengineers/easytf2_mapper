-fixed warnings
-cleaned up comments
-cleaned up some "test" files
-updated linux stuff
-rotation texture error (bird's eye):
	-1 = top
	-2 = bottom
	-3 = west
	-4 = east
	-5 = north
	-6 = south
	
## stole this from sledge. let's have a look at what this means

        public void AlignTextureToWorld()
        {
            // Set the U and V axes to match the X, Y, or Z axes
            // How they are calculated depends on which direction the plane is facing

            var direction = Plane.GetClosestAxisToNormal();

            // VHE behaviour:
            // U axis: If the closest axis to the normal is the X axis,
            //         the U axis is UnitY. Otherwise, the U axis is UnitX.
            // V axis: If the closest axis to the normal is the Z axis,
            //         the V axis is -UnitY. Otherwise, the V axis is -UnitZ.

            Texture.UAxis = direction == Coordinate.UnitX ? Coordinate.UnitY : Coordinate.UnitX;
            Texture.VAxis = direction == Coordinate.UnitZ ? -Coordinate.UnitY : -Coordinate.UnitZ;
            Texture.Rotation = 0;

            CalculateTextureCoordinates(true);
        }
		# what it references
		## plane.get
		public Coordinate GetClosestAxisToNormal()
        {
            // VHE prioritises the axes in order of X, Y, Z.
            var norm = Normal.Absolute();

            if (norm.X >= norm.Y && norm.X >= norm.Z) return Coordinate.UnitX; ##IF DISTANCE FROM X is grequal THAN Y AND Z furthest is X
            if (norm.Y >= norm.Z) return Coordinate.UnitY;
            return Coordinate.UnitZ;
        }
		### coordinate.unit x/y/z
		public readonly static Coordinate UnitX = new Coordinate(1, 0, 0);
        public readonly static Coordinate UnitY = new Coordinate(0, 1, 0);
        public readonly static Coordinate UnitZ = new Coordinate(0, 0, 1);
		
		
		FROM WHAT I GLEAM
		
		the "normal" is the midpoint of a side. so if it's closest to the x axis, the uaxis variable will look like "uaxis" "[0 1 0 1] 0.25".
		otherwise, it's "uaxis" "[-1 0 0 1] 0.25"
		
		if the normal is closest to the Z axis,  the vaxis variable is "uaxis" "[0 -1 0 1] 0.25". otherwise it's "uaxis" "[0 0 -1 1] 0.25"
		
		what we can do to calculate the norm for each side is go through each variable side (each side is xyz1,xyz2,xyz3 and so on) and get the normal for each, then calculating what uaxis and vaxis should be used. I reckon the tough part might be replacing the u and vaxis variables in the string, but we can probably use a .replace() with a times replaced as 1. Also, that might be a bit tough since we don't know what exactly the uaxis/vaxis values are.